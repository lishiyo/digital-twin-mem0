"""remove dao models, add user profile

Revision ID: 198d7e8faefb
Revises: f31790506918
Create Date: 2025-04-21 23:26:37.460581

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy.ext.asyncio
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '198d7e8faefb'
down_revision: Union[str, None] = 'f31790506918'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Get database connection
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    tables = inspector.get_table_names()
    
    # First create the "user" table if it doesn't exist
    if "user" not in tables:
        op.create_table('user',
            sa.Column('id', sa.String(36), nullable=False),
            sa.Column('handle', sa.String(255), nullable=False),
            sa.Column('email', sa.String(255), nullable=True),
            sa.Column('is_active', sa.Boolean(), default=True, nullable=False),
            sa.Column('is_admin', sa.Boolean(), default=False, nullable=False),
            sa.Column('auth0_id', sa.String(255), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_user_id', 'user', ['id'], unique=False)
        op.create_index('ix_user_handle', 'user', ['handle'], unique=True)
        op.create_index('ix_user_email', 'user', ['email'], unique=True)
        op.create_index('ix_user_auth0_id', 'user', ['auth0_id'], unique=True)

    # Create chat_message table if it doesn't exist
    if "chat_message" not in tables:
        op.create_table('chat_message',
            sa.Column('id', sa.String(36), nullable=False),
            sa.Column('session_id', sa.String(255), nullable=False),
            sa.Column('user_id', sa.String(36), nullable=False),
            sa.Column('content', sa.Text(), nullable=False),
            sa.Column('sender', sa.String(50), nullable=False),
            sa.Column('is_stored_in_mem0', sa.Boolean(), default=False, nullable=False),
            sa.Column('mem0_memory_id', sa.String(255), nullable=True),
            sa.Column('importance_score', sa.Float(), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_chat_message_id', 'chat_message', ['id'], unique=False)
        op.create_index('ix_chat_message_session_id', 'chat_message', ['session_id'], unique=False)
        op.create_index('ix_chat_message_user_id', 'chat_message', ['user_id'], unique=False)
        op.create_index('ix_chat_message_created_at', 'chat_message', ['created_at'], unique=False)

    # Drop any DAO-related tables (proposal, vote) if they exist
    if 'proposal' in tables:
        op.drop_table('proposal')
    
    if 'vote' in tables:
        op.drop_table('vote')
    
    # Create UserProfile table if it doesn't exist
    if 'userprofile' not in tables:
        op.create_table('userprofile',
            sa.Column('id', sa.String(36), nullable=False),
            sa.Column('user_id', sa.String(36), nullable=False),
            sa.Column('preferences', postgresql.JSON(astext_type=sa.Text()), nullable=True, server_default='{}'),
            sa.Column('interests', postgresql.JSON(astext_type=sa.Text()), nullable=True, server_default='[]'),
            sa.Column('skills', postgresql.JSON(astext_type=sa.Text()), nullable=True, server_default='[]'),
            sa.Column('dislikes', postgresql.JSON(astext_type=sa.Text()), nullable=True, server_default='[]'),
            sa.Column('communication_style', postgresql.JSON(astext_type=sa.Text()), nullable=True, server_default='{}'),
            sa.Column('key_relationships', postgresql.JSON(astext_type=sa.Text()), nullable=True, server_default='[]'),
            sa.Column('last_updated_source', sa.String(255), nullable=True),
            sa.Column('confidence_score', sa.Float(), nullable=True),
            sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
            sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), onupdate=sa.text('now()'), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        op.create_index('ix_userprofile_id', 'userprofile', ['id'], unique=False)
        op.create_index('ix_userprofile_user_id', 'userprofile', ['user_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Only drop UserProfile table in downgrade, keep others intact
    op.drop_index('ix_userprofile_user_id', table_name='userprofile')
    op.drop_index('ix_userprofile_id', table_name='userprofile')
    op.drop_table('userprofile')
    # ### end Alembic commands ### 